// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class Approval extends EthereumEvent {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Burn extends EthereumEvent {
  get params(): Burn__Params {
    return new Burn__Params(this);
  }
}

export class Burn__Params {
  _event: Burn;

  constructor(event: Burn) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount0(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get to(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class Claim extends EthereumEvent {
  get params(): Claim__Params {
    return new Claim__Params(this);
  }
}

export class Claim__Params {
  _event: Claim;

  constructor(event: Claim) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount0(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Fees extends EthereumEvent {
  get params(): Fees__Params {
    return new Fees__Params(this);
  }
}

export class Fees__Params {
  _event: Fees;

  constructor(event: Fees) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount0(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Mint extends EthereumEvent {
  get params(): Mint__Params {
    return new Mint__Params(this);
  }
}

export class Mint__Params {
  _event: Mint;

  constructor(event: Mint) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount0(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Swap extends EthereumEvent {
  get params(): Swap__Params {
    return new Swap__Params(this);
  }
}

export class Swap__Params {
  _event: Swap;

  constructor(event: Swap) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount0In(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount1In(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount0Out(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amount1Out(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get to(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class Sync extends EthereumEvent {
  get params(): Sync__Params {
    return new Sync__Params(this);
  }
}

export class Sync__Params {
  _event: Sync;

  constructor(event: Sync) {
    this._event = event;
  }

  get reserve0(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get reserve1(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Transfer extends EthereumEvent {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Pair__burnResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Pair__claimFeesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Pair__currentCumulativePricesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    map.set("value2", EthereumValue.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class Pair__getReservesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    map.set("value2", EthereumValue.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class Pair__lastObservationResultValue0Struct extends EthereumTuple {
  get timestamp(): BigInt {
    return this[0].toBigInt();
  }

  get reserve0Cumulative(): BigInt {
    return this[1].toBigInt();
  }

  get reserve1Cumulative(): BigInt {
    return this[2].toBigInt();
  }
}

export class Pair__metadataResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: boolean;
  value5: Address;
  value6: Address;
  value7: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: boolean,
    value5: Address,
    value6: Address,
    value7: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    map.set("value2", EthereumValue.fromUnsignedBigInt(this.value2));
    map.set("value3", EthereumValue.fromUnsignedBigInt(this.value3));
    map.set("value4", EthereumValue.fromBoolean(this.value4));
    map.set("value5", EthereumValue.fromAddress(this.value5));
    map.set("value6", EthereumValue.fromAddress(this.value6));
    map.set("value7", EthereumValue.fromUnsignedBigInt(this.value7));
    return map;
  }
}

export class Pair__observationsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    map.set("value2", EthereumValue.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class Pair__tokensResult {
  value0: Address;
  value1: Address;

  constructor(value0: Address, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromAddress(this.value0));
    map.set("value1", EthereumValue.fromAddress(this.value1));
    return map;
  }
}

export class Pair extends SmartContract {
  static bind(address: Address): Pair {
    return new Pair("Pair", address);
  }

  allowance(param0: Address, param1: Address): BigInt {
    let result = super.call("allowance", [
      EthereumValue.fromAddress(param0),
      EthereumValue.fromAddress(param1)
    ]);

    return result[0].toBigInt();
  }

  try_allowance(param0: Address, param1: Address): CallResult<BigInt> {
    let result = super.tryCall("allowance", [
      EthereumValue.fromAddress(param0),
      EthereumValue.fromAddress(param1)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", [
      EthereumValue.fromAddress(spender),
      EthereumValue.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): CallResult<boolean> {
    let result = super.tryCall("approve", [
      EthereumValue.fromAddress(spender),
      EthereumValue.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(param0: Address): BigInt {
    let result = super.call("balanceOf", [EthereumValue.fromAddress(param0)]);

    return result[0].toBigInt();
  }

  try_balanceOf(param0: Address): CallResult<BigInt> {
    let result = super.tryCall("balanceOf", [
      EthereumValue.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  blockTimestampLast(): BigInt {
    let result = super.call("blockTimestampLast", []);

    return result[0].toBigInt();
  }

  try_blockTimestampLast(): CallResult<BigInt> {
    let result = super.tryCall("blockTimestampLast", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  burn(to: Address): Pair__burnResult {
    let result = super.call("burn", [EthereumValue.fromAddress(to)]);

    return new Pair__burnResult(result[0].toBigInt(), result[1].toBigInt());
  }

  try_burn(to: Address): CallResult<Pair__burnResult> {
    let result = super.tryCall("burn", [EthereumValue.fromAddress(to)]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new Pair__burnResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  claimFees(): Pair__claimFeesResult {
    let result = super.call("claimFees", []);

    return new Pair__claimFeesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_claimFees(): CallResult<Pair__claimFeesResult> {
    let result = super.tryCall("claimFees", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new Pair__claimFeesResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  current(tokenIn: Address, amountIn: BigInt): BigInt {
    let result = super.call("current", [
      EthereumValue.fromAddress(tokenIn),
      EthereumValue.fromUnsignedBigInt(amountIn)
    ]);

    return result[0].toBigInt();
  }

  try_current(tokenIn: Address, amountIn: BigInt): CallResult<BigInt> {
    let result = super.tryCall("current", [
      EthereumValue.fromAddress(tokenIn),
      EthereumValue.fromUnsignedBigInt(amountIn)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  currentCumulativePrices(): Pair__currentCumulativePricesResult {
    let result = super.call("currentCumulativePrices", []);

    return new Pair__currentCumulativePricesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_currentCumulativePrices(): CallResult<
    Pair__currentCumulativePricesResult
  > {
    let result = super.tryCall("currentCumulativePrices", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new Pair__currentCumulativePricesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  decimals(): i32 {
    let result = super.call("decimals", []);

    return result[0].toI32();
  }

  try_decimals(): CallResult<i32> {
    let result = super.tryCall("decimals", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toI32());
  }

  factoryAddress(): Address {
    let result = super.call("factoryAddress", []);

    return result[0].toAddress();
  }

  try_factoryAddress(): CallResult<Address> {
    let result = super.tryCall("factoryAddress", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  feeRatio(): BigInt {
    let result = super.call("feeRatio", []);

    return result[0].toBigInt();
  }

  try_feeRatio(): CallResult<BigInt> {
    let result = super.tryCall("feeRatio", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  fees(): Address {
    let result = super.call("fees", []);

    return result[0].toAddress();
  }

  try_fees(): CallResult<Address> {
    let result = super.tryCall("fees", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  getAmountOut(amountIn: BigInt, tokenIn: Address): BigInt {
    let result = super.call("getAmountOut", [
      EthereumValue.fromUnsignedBigInt(amountIn),
      EthereumValue.fromAddress(tokenIn)
    ]);

    return result[0].toBigInt();
  }

  try_getAmountOut(amountIn: BigInt, tokenIn: Address): CallResult<BigInt> {
    let result = super.tryCall("getAmountOut", [
      EthereumValue.fromUnsignedBigInt(amountIn),
      EthereumValue.fromAddress(tokenIn)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getReserves(): Pair__getReservesResult {
    let result = super.call("getReserves", []);

    return new Pair__getReservesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getReserves(): CallResult<Pair__getReservesResult> {
    let result = super.tryCall("getReserves", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new Pair__getReservesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  governanceAddress(): Address {
    let result = super.call("governanceAddress", []);

    return result[0].toAddress();
  }

  try_governanceAddress(): CallResult<Address> {
    let result = super.tryCall("governanceAddress", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  lastObservation(): Pair__lastObservationResultValue0Struct {
    let result = super.call("lastObservation", []);

    return result[0].toTuple() as Pair__lastObservationResultValue0Struct;
  }

  try_lastObservation(): CallResult<Pair__lastObservationResultValue0Struct> {
    let result = super.tryCall("lastObservation", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      value[0].toTuple() as Pair__lastObservationResultValue0Struct
    );
  }

  metadata(): Pair__metadataResult {
    let result = super.call("metadata", []);

    return new Pair__metadataResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBoolean(),
      result[5].toAddress(),
      result[6].toAddress(),
      result[7].toBigInt()
    );
  }

  try_metadata(): CallResult<Pair__metadataResult> {
    let result = super.tryCall("metadata", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new Pair__metadataResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBoolean(),
        value[5].toAddress(),
        value[6].toAddress(),
        value[7].toBigInt()
      )
    );
  }

  mint(to: Address): BigInt {
    let result = super.call("mint", [EthereumValue.fromAddress(to)]);

    return result[0].toBigInt();
  }

  try_mint(to: Address): CallResult<BigInt> {
    let result = super.tryCall("mint", [EthereumValue.fromAddress(to)]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", []);

    return result[0].toString();
  }

  try_name(): CallResult<string> {
    let result = super.tryCall("name", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toString());
  }

  nonces(param0: Address): BigInt {
    let result = super.call("nonces", [EthereumValue.fromAddress(param0)]);

    return result[0].toBigInt();
  }

  try_nonces(param0: Address): CallResult<BigInt> {
    let result = super.tryCall("nonces", [EthereumValue.fromAddress(param0)]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  observationLength(): BigInt {
    let result = super.call("observationLength", []);

    return result[0].toBigInt();
  }

  try_observationLength(): CallResult<BigInt> {
    let result = super.tryCall("observationLength", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  observations(param0: BigInt): Pair__observationsResult {
    let result = super.call("observations", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return new Pair__observationsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_observations(param0: BigInt): CallResult<Pair__observationsResult> {
    let result = super.tryCall("observations", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new Pair__observationsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  prices(tokenIn: Address, amountIn: BigInt, points: BigInt): Array<BigInt> {
    let result = super.call("prices", [
      EthereumValue.fromAddress(tokenIn),
      EthereumValue.fromUnsignedBigInt(amountIn),
      EthereumValue.fromUnsignedBigInt(points)
    ]);

    return result[0].toBigIntArray();
  }

  try_prices(
    tokenIn: Address,
    amountIn: BigInt,
    points: BigInt
  ): CallResult<Array<BigInt>> {
    let result = super.tryCall("prices", [
      EthereumValue.fromAddress(tokenIn),
      EthereumValue.fromUnsignedBigInt(amountIn),
      EthereumValue.fromUnsignedBigInt(points)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigIntArray());
  }

  quote(tokenIn: Address, amountIn: BigInt, granularity: BigInt): BigInt {
    let result = super.call("quote", [
      EthereumValue.fromAddress(tokenIn),
      EthereumValue.fromUnsignedBigInt(amountIn),
      EthereumValue.fromUnsignedBigInt(granularity)
    ]);

    return result[0].toBigInt();
  }

  try_quote(
    tokenIn: Address,
    amountIn: BigInt,
    granularity: BigInt
  ): CallResult<BigInt> {
    let result = super.tryCall("quote", [
      EthereumValue.fromAddress(tokenIn),
      EthereumValue.fromUnsignedBigInt(amountIn),
      EthereumValue.fromUnsignedBigInt(granularity)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  reserve0(): BigInt {
    let result = super.call("reserve0", []);

    return result[0].toBigInt();
  }

  try_reserve0(): CallResult<BigInt> {
    let result = super.tryCall("reserve0", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  reserve0CumulativeLast(): BigInt {
    let result = super.call("reserve0CumulativeLast", []);

    return result[0].toBigInt();
  }

  try_reserve0CumulativeLast(): CallResult<BigInt> {
    let result = super.tryCall("reserve0CumulativeLast", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  reserve1(): BigInt {
    let result = super.call("reserve1", []);

    return result[0].toBigInt();
  }

  try_reserve1(): CallResult<BigInt> {
    let result = super.tryCall("reserve1", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  reserve1CumulativeLast(): BigInt {
    let result = super.call("reserve1CumulativeLast", []);

    return result[0].toBigInt();
  }

  try_reserve1CumulativeLast(): CallResult<BigInt> {
    let result = super.tryCall("reserve1CumulativeLast", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  sample(
    tokenIn: Address,
    amountIn: BigInt,
    points: BigInt,
    window: BigInt
  ): Array<BigInt> {
    let result = super.call("sample", [
      EthereumValue.fromAddress(tokenIn),
      EthereumValue.fromUnsignedBigInt(amountIn),
      EthereumValue.fromUnsignedBigInt(points),
      EthereumValue.fromUnsignedBigInt(window)
    ]);

    return result[0].toBigIntArray();
  }

  try_sample(
    tokenIn: Address,
    amountIn: BigInt,
    points: BigInt,
    window: BigInt
  ): CallResult<Array<BigInt>> {
    let result = super.tryCall("sample", [
      EthereumValue.fromAddress(tokenIn),
      EthereumValue.fromUnsignedBigInt(amountIn),
      EthereumValue.fromUnsignedBigInt(points),
      EthereumValue.fromUnsignedBigInt(window)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigIntArray());
  }

  stable(): boolean {
    let result = super.call("stable", []);

    return result[0].toBoolean();
  }

  try_stable(): CallResult<boolean> {
    let result = super.tryCall("stable", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", []);

    return result[0].toString();
  }

  try_symbol(): CallResult<string> {
    let result = super.tryCall("symbol", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toString());
  }

  token0(): Address {
    let result = super.call("token0", []);

    return result[0].toAddress();
  }

  try_token0(): CallResult<Address> {
    let result = super.tryCall("token0", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  token1(): Address {
    let result = super.call("token1", []);

    return result[0].toAddress();
  }

  try_token1(): CallResult<Address> {
    let result = super.tryCall("token1", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  tokens(): Pair__tokensResult {
    let result = super.call("tokens", []);

    return new Pair__tokensResult(result[0].toAddress(), result[1].toAddress());
  }

  try_tokens(): CallResult<Pair__tokensResult> {
    let result = super.tryCall("tokens", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new Pair__tokensResult(value[0].toAddress(), value[1].toAddress())
    );
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): CallResult<BigInt> {
    let result = super.tryCall("totalSupply", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  transfer(dst: Address, amount: BigInt): boolean {
    let result = super.call("transfer", [
      EthereumValue.fromAddress(dst),
      EthereumValue.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(dst: Address, amount: BigInt): CallResult<boolean> {
    let result = super.tryCall("transfer", [
      EthereumValue.fromAddress(dst),
      EthereumValue.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(src: Address, dst: Address, amount: BigInt): boolean {
    let result = super.call("transferFrom", [
      EthereumValue.fromAddress(src),
      EthereumValue.fromAddress(dst),
      EthereumValue.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transferFrom(
    src: Address,
    dst: Address,
    amount: BigInt
  ): CallResult<boolean> {
    let result = super.tryCall("transferFrom", [
      EthereumValue.fromAddress(src),
      EthereumValue.fromAddress(dst),
      EthereumValue.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }
}

export class ApproveCall extends EthereumCall {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BurnCall extends EthereumCall {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get amount0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class ClaimFeesCall extends EthereumCall {
  get inputs(): ClaimFeesCall__Inputs {
    return new ClaimFeesCall__Inputs(this);
  }

  get outputs(): ClaimFeesCall__Outputs {
    return new ClaimFeesCall__Outputs(this);
  }
}

export class ClaimFeesCall__Inputs {
  _call: ClaimFeesCall;

  constructor(call: ClaimFeesCall) {
    this._call = call;
  }
}

export class ClaimFeesCall__Outputs {
  _call: ClaimFeesCall;

  constructor(call: ClaimFeesCall) {
    this._call = call;
  }

  get claimed0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get claimed1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class InitializeCall extends EthereumCall {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _token0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _token1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _stable(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MintCall extends EthereumCall {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get liquidity(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PermitCall extends EthereumCall {
  get inputs(): PermitCall__Inputs {
    return new PermitCall__Inputs(this);
  }

  get outputs(): PermitCall__Outputs {
    return new PermitCall__Outputs(this);
  }
}

export class PermitCall__Inputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class PermitCall__Outputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }
}

export class SkimCall extends EthereumCall {
  get inputs(): SkimCall__Inputs {
    return new SkimCall__Inputs(this);
  }

  get outputs(): SkimCall__Outputs {
    return new SkimCall__Outputs(this);
  }
}

export class SkimCall__Inputs {
  _call: SkimCall;

  constructor(call: SkimCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SkimCall__Outputs {
  _call: SkimCall;

  constructor(call: SkimCall) {
    this._call = call;
  }
}

export class SwapCall extends EthereumCall {
  get inputs(): SwapCall__Inputs {
    return new SwapCall__Inputs(this);
  }

  get outputs(): SwapCall__Outputs {
    return new SwapCall__Outputs(this);
  }
}

export class SwapCall__Inputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get amount0Out(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount1Out(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SwapCall__Outputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }
}

export class SyncCall extends EthereumCall {
  get inputs(): SyncCall__Inputs {
    return new SyncCall__Inputs(this);
  }

  get outputs(): SyncCall__Outputs {
    return new SyncCall__Outputs(this);
  }
}

export class SyncCall__Inputs {
  _call: SyncCall;

  constructor(call: SyncCall) {
    this._call = call;
  }
}

export class SyncCall__Outputs {
  _call: SyncCall;

  constructor(call: SyncCall) {
    this._call = call;
  }
}

export class SyncFeesCall extends EthereumCall {
  get inputs(): SyncFeesCall__Inputs {
    return new SyncFeesCall__Inputs(this);
  }

  get outputs(): SyncFeesCall__Outputs {
    return new SyncFeesCall__Outputs(this);
  }
}

export class SyncFeesCall__Inputs {
  _call: SyncFeesCall;

  constructor(call: SyncFeesCall) {
    this._call = call;
  }
}

export class SyncFeesCall__Outputs {
  _call: SyncFeesCall;

  constructor(call: SyncFeesCall) {
    this._call = call;
  }
}

export class TransferCall extends EthereumCall {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get dst(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends EthereumCall {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get src(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get dst(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
