// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class OperatorStatus extends EthereumEvent {
  get params(): OperatorStatus__Params {
    return new OperatorStatus__Params(this);
  }
}

export class OperatorStatus__Params {
  _event: OperatorStatus;

  constructor(event: OperatorStatus) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get state(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class PairCreated extends EthereumEvent {
  get params(): PairCreated__Params {
    return new PairCreated__Params(this);
  }
}

export class PairCreated__Params {
  _event: PairCreated;

  constructor(event: PairCreated) {
    this._event = event;
  }

  get token0(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token1(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get stable(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }

  get pair(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get param4(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Factory extends SmartContract {
  static bind(address: Address): Factory {
    return new Factory("Factory", address);
  }

  allPairs(param0: BigInt): Address {
    let result = super.call("allPairs", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_allPairs(param0: BigInt): CallResult<Address> {
    let result = super.tryCall("allPairs", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  allPairsLength(): BigInt {
    let result = super.call("allPairsLength", []);

    return result[0].toBigInt();
  }

  try_allPairsLength(): CallResult<BigInt> {
    let result = super.tryCall("allPairsLength", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  childInterfaceAddress(): Address {
    let result = super.call("childInterfaceAddress", []);

    return result[0].toAddress();
  }

  try_childInterfaceAddress(): CallResult<Address> {
    let result = super.tryCall("childInterfaceAddress", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  childSubImplementationAddress(): Address {
    let result = super.call("childSubImplementationAddress", []);

    return result[0].toAddress();
  }

  try_childSubImplementationAddress(): CallResult<Address> {
    let result = super.tryCall("childSubImplementationAddress", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  createFees(): Address {
    let result = super.call("createFees", []);

    return result[0].toAddress();
  }

  try_createFees(): CallResult<Address> {
    let result = super.tryCall("createFees", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  createPair(tokenA: Address, tokenB: Address, stable: boolean): Address {
    let result = super.call("createPair", [
      EthereumValue.fromAddress(tokenA),
      EthereumValue.fromAddress(tokenB),
      EthereumValue.fromBoolean(stable)
    ]);

    return result[0].toAddress();
  }

  try_createPair(
    tokenA: Address,
    tokenB: Address,
    stable: boolean
  ): CallResult<Address> {
    let result = super.tryCall("createPair", [
      EthereumValue.fromAddress(tokenA),
      EthereumValue.fromAddress(tokenB),
      EthereumValue.fromBoolean(stable)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  feesFactory(): Address {
    let result = super.call("feesFactory", []);

    return result[0].toAddress();
  }

  try_feesFactory(): CallResult<Address> {
    let result = super.tryCall("feesFactory", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  getPair(param0: Address, param1: Address, param2: boolean): Address {
    let result = super.call("getPair", [
      EthereumValue.fromAddress(param0),
      EthereumValue.fromAddress(param1),
      EthereumValue.fromBoolean(param2)
    ]);

    return result[0].toAddress();
  }

  try_getPair(
    param0: Address,
    param1: Address,
    param2: boolean
  ): CallResult<Address> {
    let result = super.tryCall("getPair", [
      EthereumValue.fromAddress(param0),
      EthereumValue.fromAddress(param1),
      EthereumValue.fromBoolean(param2)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  governanceAddress(): Address {
    let result = super.call("governanceAddress", []);

    return result[0].toAddress();
  }

  try_governanceAddress(): CallResult<Address> {
    let result = super.tryCall("governanceAddress", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  interfaceSourceAddress(): Address {
    let result = super.call("interfaceSourceAddress", []);

    return result[0].toAddress();
  }

  try_interfaceSourceAddress(): CallResult<Address> {
    let result = super.tryCall("interfaceSourceAddress", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  isOperator(param0: Address): boolean {
    let result = super.call("isOperator", [EthereumValue.fromAddress(param0)]);

    return result[0].toBoolean();
  }

  try_isOperator(param0: Address): CallResult<boolean> {
    let result = super.tryCall("isOperator", [
      EthereumValue.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  isPair(param0: Address): boolean {
    let result = super.call("isPair", [EthereumValue.fromAddress(param0)]);

    return result[0].toBoolean();
  }

  try_isPair(param0: Address): CallResult<boolean> {
    let result = super.tryCall("isPair", [EthereumValue.fromAddress(param0)]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  isPaused(): boolean {
    let result = super.call("isPaused", []);

    return result[0].toBoolean();
  }

  try_isPaused(): CallResult<boolean> {
    let result = super.tryCall("isPaused", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  pairCodeHash(): Bytes {
    let result = super.call("pairCodeHash", []);

    return result[0].toBytes();
  }

  try_pairCodeHash(): CallResult<Bytes> {
    let result = super.tryCall("pairCodeHash", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  poolSpecificFees(param0: Address): BigInt {
    let result = super.call("poolSpecificFees", [
      EthereumValue.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_poolSpecificFees(param0: Address): CallResult<BigInt> {
    let result = super.tryCall("poolSpecificFees", [
      EthereumValue.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  poolSpecificFeesEnabled(param0: Address): boolean {
    let result = super.call("poolSpecificFeesEnabled", [
      EthereumValue.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_poolSpecificFeesEnabled(param0: Address): CallResult<boolean> {
    let result = super.tryCall("poolSpecificFeesEnabled", [
      EthereumValue.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  stableFees(): BigInt {
    let result = super.call("stableFees", []);

    return result[0].toBigInt();
  }

  try_stableFees(): CallResult<BigInt> {
    let result = super.tryCall("stableFees", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  volatileFees(): BigInt {
    let result = super.call("volatileFees", []);

    return result[0].toBigInt();
  }

  try_volatileFees(): CallResult<BigInt> {
    let result = super.tryCall("volatileFees", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  voter(): Address {
    let result = super.call("voter", []);

    return result[0].toAddress();
  }

  try_voter(): CallResult<Address> {
    let result = super.tryCall("voter", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }
}

export class CreateFeesCall extends EthereumCall {
  get inputs(): CreateFeesCall__Inputs {
    return new CreateFeesCall__Inputs(this);
  }

  get outputs(): CreateFeesCall__Outputs {
    return new CreateFeesCall__Outputs(this);
  }
}

export class CreateFeesCall__Inputs {
  _call: CreateFeesCall;

  constructor(call: CreateFeesCall) {
    this._call = call;
  }
}

export class CreateFeesCall__Outputs {
  _call: CreateFeesCall;

  constructor(call: CreateFeesCall) {
    this._call = call;
  }

  get fees(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class CreatePairCall extends EthereumCall {
  get inputs(): CreatePairCall__Inputs {
    return new CreatePairCall__Inputs(this);
  }

  get outputs(): CreatePairCall__Outputs {
    return new CreatePairCall__Outputs(this);
  }
}

export class CreatePairCall__Inputs {
  _call: CreatePairCall;

  constructor(call: CreatePairCall) {
    this._call = call;
  }

  get tokenA(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenB(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get stable(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class CreatePairCall__Outputs {
  _call: CreatePairCall;

  constructor(call: CreatePairCall) {
    this._call = call;
  }

  get pair(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class InitializeCall extends EthereumCall {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _feesFactory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class SetOperatorCall extends EthereumCall {
  get inputs(): SetOperatorCall__Inputs {
    return new SetOperatorCall__Inputs(this);
  }

  get outputs(): SetOperatorCall__Outputs {
    return new SetOperatorCall__Outputs(this);
  }
}

export class SetOperatorCall__Inputs {
  _call: SetOperatorCall;

  constructor(call: SetOperatorCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get state(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetOperatorCall__Outputs {
  _call: SetOperatorCall;

  constructor(call: SetOperatorCall) {
    this._call = call;
  }
}

export class SetPauseCall extends EthereumCall {
  get inputs(): SetPauseCall__Inputs {
    return new SetPauseCall__Inputs(this);
  }

  get outputs(): SetPauseCall__Outputs {
    return new SetPauseCall__Outputs(this);
  }
}

export class SetPauseCall__Inputs {
  _call: SetPauseCall;

  constructor(call: SetPauseCall) {
    this._call = call;
  }

  get _state(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetPauseCall__Outputs {
  _call: SetPauseCall;

  constructor(call: SetPauseCall) {
    this._call = call;
  }
}

export class SetPoolSpecificFeesCall extends EthereumCall {
  get inputs(): SetPoolSpecificFeesCall__Inputs {
    return new SetPoolSpecificFeesCall__Inputs(this);
  }

  get outputs(): SetPoolSpecificFeesCall__Outputs {
    return new SetPoolSpecificFeesCall__Outputs(this);
  }
}

export class SetPoolSpecificFeesCall__Inputs {
  _call: SetPoolSpecificFeesCall;

  constructor(call: SetPoolSpecificFeesCall) {
    this._call = call;
  }

  get _pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _fees(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _enabled(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class SetPoolSpecificFeesCall__Outputs {
  _call: SetPoolSpecificFeesCall;

  constructor(call: SetPoolSpecificFeesCall) {
    this._call = call;
  }
}

export class SetStableFeesCall extends EthereumCall {
  get inputs(): SetStableFeesCall__Inputs {
    return new SetStableFeesCall__Inputs(this);
  }

  get outputs(): SetStableFeesCall__Outputs {
    return new SetStableFeesCall__Outputs(this);
  }
}

export class SetStableFeesCall__Inputs {
  _call: SetStableFeesCall;

  constructor(call: SetStableFeesCall) {
    this._call = call;
  }

  get _stableFees(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetStableFeesCall__Outputs {
  _call: SetStableFeesCall;

  constructor(call: SetStableFeesCall) {
    this._call = call;
  }
}

export class SetVolatileFeesCall extends EthereumCall {
  get inputs(): SetVolatileFeesCall__Inputs {
    return new SetVolatileFeesCall__Inputs(this);
  }

  get outputs(): SetVolatileFeesCall__Outputs {
    return new SetVolatileFeesCall__Outputs(this);
  }
}

export class SetVolatileFeesCall__Inputs {
  _call: SetVolatileFeesCall;

  constructor(call: SetVolatileFeesCall) {
    this._call = call;
  }

  get _volatileFees(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetVolatileFeesCall__Outputs {
  _call: SetVolatileFeesCall;

  constructor(call: SetVolatileFeesCall) {
    this._call = call;
  }
}

export class UpdateChildInterfaceAddressCall extends EthereumCall {
  get inputs(): UpdateChildInterfaceAddressCall__Inputs {
    return new UpdateChildInterfaceAddressCall__Inputs(this);
  }

  get outputs(): UpdateChildInterfaceAddressCall__Outputs {
    return new UpdateChildInterfaceAddressCall__Outputs(this);
  }
}

export class UpdateChildInterfaceAddressCall__Inputs {
  _call: UpdateChildInterfaceAddressCall;

  constructor(call: UpdateChildInterfaceAddressCall) {
    this._call = call;
  }

  get _childInterfaceAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateChildInterfaceAddressCall__Outputs {
  _call: UpdateChildInterfaceAddressCall;

  constructor(call: UpdateChildInterfaceAddressCall) {
    this._call = call;
  }
}

export class UpdateChildSubImplementationAddressCall extends EthereumCall {
  get inputs(): UpdateChildSubImplementationAddressCall__Inputs {
    return new UpdateChildSubImplementationAddressCall__Inputs(this);
  }

  get outputs(): UpdateChildSubImplementationAddressCall__Outputs {
    return new UpdateChildSubImplementationAddressCall__Outputs(this);
  }
}

export class UpdateChildSubImplementationAddressCall__Inputs {
  _call: UpdateChildSubImplementationAddressCall;

  constructor(call: UpdateChildSubImplementationAddressCall) {
    this._call = call;
  }

  get _childSubImplementationAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateChildSubImplementationAddressCall__Outputs {
  _call: UpdateChildSubImplementationAddressCall;

  constructor(call: UpdateChildSubImplementationAddressCall) {
    this._call = call;
  }
}
